diff -Nru a/language/English/strings.po b/language/English/strings.po
--- a/language/English/strings.po	2015-06-14 10:05:06.000000000 +0200
+++ b/language/English/strings.po	2015-09-29 07:40:20.000000000 +0200
@@ -168,7 +168,9 @@
 msgid "Enable or disable support for Wired (Ethernet) networks"
 msgstr ""
 
-#empty string with id 731
+msgctxt "#731"
+msgid "Configure OpenVPN and PPTP VPN connections"
+msgstr ""
 
 msgctxt "#732"
 msgid "Configure the 1st time (NTP) server"
@@ -314,7 +316,9 @@
 msgid "Wired Networks"
 msgstr ""
 
-#empty string with id 32104
+msgctxt "#32104"
+msgid "VPN"
+msgstr ""
 
 msgctxt "#32105"
 msgid "Active"
@@ -420,7 +424,35 @@
 msgid "Domain #3"
 msgstr ""
 
-#empty strings from id 32131 to 32139
+msgctxt "#32131"
+msgid "VPN Type"
+msgstr ""
+
+msgctxt "#32132"
+msgid "Network Name"
+msgstr ""
+
+msgctxt "#32133"
+msgid "VPN Server"
+msgstr ""
+
+msgctxt "#32134"
+msgid "VPN DNS Domain"
+msgstr ""
+
+#empty strings from id 32135 to 32136
+
+msgctxt "#32137"
+msgid "Certificate Autority Certificate"
+msgstr ""
+
+msgctxt "#32138"
+msgid "Certificate"
+msgstr ""
+
+msgctxt "#32139"
+msgid "Key"
+msgstr ""
 
 msgctxt "#32140"
 msgid "Save"
@@ -462,7 +494,119 @@
 msgid "Edit"
 msgstr ""
 
-#empty strings from id 32151 to 32179
+msgctxt "#32151"
+msgid "Refuse EAP"
+msgstr ""
+
+msgctxt "#32152"
+msgid "Refuse PAP"
+msgstr ""
+
+msgctxt "#32153"
+msgid "Refuse CHAP"
+msgstr ""
+
+msgctxt "#32154"
+msgid "Refuse MS-CHAP"
+msgstr ""
+
+msgctxt "#32155"
+msgid "Refuse MS-CHAP v2"
+msgstr ""
+
+msgctxt "#32156"
+msgid "Require MPPE"
+msgstr ""
+
+msgctxt "#32157"
+msgid "Require MPPE (40 bit)"
+msgstr ""
+
+msgctxt "#32158"
+msgid "Require MPPE (128 bit)"
+msgstr ""
+
+msgctxt "#32159"
+msgid "Require Stateful MPPE"
+msgstr ""
+
+msgctxt "#32160"
+msgid "Disable BSD Compression"
+msgstr ""
+
+msgctxt "#32161"
+msgid "Disable VJ Compression"
+msgstr ""
+
+msgctxt "#32162"
+msgid "LCP Echo Failure"
+msgstr ""
+
+msgctxt "#32163"
+msgid "LCP Echo Interval"
+msgstr ""
+
+msgctxt "#32164"
+msgid "Disable Deflate Compression"
+msgstr ""
+
+msgctxt "#32165"
+msgid "MTU"
+msgstr ""
+
+msgctxt "#32166"
+msgid "NSCertType"
+msgstr ""
+
+msgctxt "#32167"
+msgid "Proto"
+msgstr ""
+
+msgctxt "#32168"
+msgid "Port"
+msgstr ""
+
+msgctxt "#32169"
+msgid "AuthUserPass"
+msgstr ""
+
+msgctxt "#32170"
+msgid "AskPass"
+msgstr ""
+
+msgctxt "#32171"
+msgid "AuthNoCache"
+msgstr ""
+
+msgctxt "#32172"
+msgid "TLSRemote"
+msgstr ""
+
+msgctxt "#32173"
+msgid "TLSAuth"
+msgstr ""
+
+msgctxt "#32174"
+msgid "TLSAuthDir"
+msgstr ""
+
+msgctxt "#32175"
+msgid "Auth"
+msgstr ""
+
+msgctxt "#32176"
+msgid "CompLZO"
+msgstr ""
+
+msgctxt "#32177"
+msgid "RemoteCertTls"
+msgstr ""
+
+msgctxt "#32178"
+msgid "ConfigFile"
+msgstr ""
+
+#empty string with id 32179
 
 msgctxt "#32180"
 msgid "Would you like to update @DISTRONAME@ now?"
@@ -646,7 +790,13 @@
 msgid "Enable Cron"
 msgstr ""
 
-#empty strings from id 32321 to 32322
+msgctxt "#32321"
+msgid "Virtual Private Networks"
+msgstr ""
+
+msgctxt "#32322"
+msgid "Add new VPN configuration"
+msgstr ""
 
 msgctxt "#32323"
 msgid "Reset to Defaults"
@@ -784,7 +934,11 @@
 msgid "Backup Progress"
 msgstr ""
 
-#empty strings from id 32376 to 32378
+#empty strings from id 32376 to 32377
+
+msgctxt "#32378"
+msgid "The information you entered is incomplete"
+msgstr ""
 
 msgctxt "#32379"
 msgid "There is not enough free storage space to continue!"
diff -Nru a/skins/Default/720p/mainWindow.xml b/skins/Default/720p/mainWindow.xml
--- a/skins/Default/720p/mainWindow.xml	2015-06-14 10:05:06.000000000 +0200
+++ b/skins/Default/720p/mainWindow.xml	2015-09-29 07:40:20.000000000 +0200
@@ -589,6 +589,16 @@
                             <visible>StringCompare(ListItem.Property(netType), wifi)</visible> 
                             <texture>icons/wlan.png</texture>
                         </control>
+                        <!-- Icon vpn -->
+                        <control type="image">
+                            <left>10</left>
+                            <top>20</top>
+                            <width>48</width>
+                            <height>48</height>
+                            <aspectratio>keep</aspectratio>
+                            <visible>StringCompare(ListItem.Property(netType), vpn)</visible> 
+                            <texture>icons/vpn.png</texture>
+                        </control>
                         <!-- Connection Name -->
                         <control type="label">
                             <left>70</left>
@@ -735,6 +745,16 @@
                             <visible>StringCompare(ListItem.Property(netType), wifi)</visible> 
                             <texture>icons/wlan.png</texture>
                         </control>
+                        <!-- Icon vpn -->
+                        <control type="image">
+                            <left>10</left>
+                            <top>20</top>
+                            <width>48</width>
+                            <height>48</height>
+                            <aspectratio>keep</aspectratio>
+                            <visible>StringCompare(ListItem.Property(netType), vpn)</visible> 
+                            <texture>icons/vpn.png</texture>
+                        </control>
                         <!-- Connection Name -->
                         <control type="label">
                             <left>70</left>
diff -Nru a/src/defaults.py b/src/defaults.py
--- a/src/defaults.py	2015-06-14 10:05:06.000000000 +0200
+++ b/src/defaults.py	2015-09-29 07:40:20.000000000 +0200
@@ -42,6 +42,8 @@
 connman = {
     'CONNMAN_DAEMON': '/usr/sbin/connmand',
     'WAIT_CONF_FILE': '%s/openelec/network_wait' % CONFIG_CACHE,
+    'VPN_PLUGINS_DIR': '/usr/lib/connman/plugins-vpn',
+    'VPN_CONF_DIR': '%s/vpn-config/' % USER_CONFIG,
     'ENABLED': lambda : (True if os.path.exists(connman['CONNMAN_DAEMON']) else False),
     }
 
diff -Nru a/src/resources/lib/modules/connman.py b/src/resources/lib/modules/connman.py
--- a/src/resources/lib/modules/connman.py	2015-06-14 10:05:06.000000000 +0200
+++ b/src/resources/lib/modules/connman.py	2015-09-29 07:40:20.000000000 +0200
@@ -308,6 +308,13 @@
             self.oe.dictModules['connmanNetworkConfig'] = self
             self.service = dbus.Interface(self.oe.dbusSystemBus.get_object('net.connman', servicePath), 'net.connman.Service')
             self.service_properties = self.service.GetProperties()
+            if self.service_properties['Type'] == 'vpn':
+                dbusConnmanManager = dbus.Interface(self.oe.dbusSystemBus.get_object('net.connman.vpn', '/'), 'net.connman.vpn.Manager')
+                self.vpn_connections = dbusConnmanManager.GetConnections()
+                for (self.servicePath, self.vpn_properties) in self.vpn_connections:
+                    if self.servicePath.split('/')[-1] in servicePath.split('/')[-1]:
+                        self.service_properties['Provider'] = self.vpn_properties
+                        break
             for entry in sorted(self.datamap):
                 for (key, value) in self.datamap[entry].iteritems():
                     if self.struct[value]['type'] == 'Boolean':
@@ -357,6 +364,16 @@
             self.oe.dbg_log('connmanService::menu_loader', 'enter_function', 0)
             self.winOeCon.showButton(3, 32140, 'connmanNetworkConfig', 'save_network')
             self.winOeCon.showButton(2, 32212, 'connmanNetworkConfig', 'cancel')
+            if self.servicePath not in ['new_vpn']:
+                if self.service_properties['Type'] in ['wifi']:
+                    if self.service_properties['Favorite'] == True:
+                        self.winOeCon.showButton(1, 32141, 'connmanNetworkConfig', 'delete_network')
+                if self.service_properties['State'] in ['ready', 'online']:
+                    self.winOeCon.showButton(4, 32143, 'connmanNetworkConfig', 'disconnect_network', self.oe.listObject['list'],
+                                             self.oe.listObject['list'])
+                else:
+                    self.winOeCon.showButton(4, 32144, 'connmanNetworkConfig', 'connect_network', self.oe.listObject['list'],
+                                             self.oe.listObject['list'])
             self.winOeCon.build_menu(self.struct, fltr=[menuItem.getProperty('category')])
             self.oe.dbg_log('connmanService::menu_loader', 'exit_function', 0)
         except Exception, e:
@@ -481,14 +498,616 @@
 
 
 ####################################################################
+## VPN connectio class
+####################################################################
+
+class connmanVpn(object):
+
+    menu = {}
+
+    def __init__(self, vpn, oeMain):
+        try:
+            oeMain.dbg_log('connmanVpn::__init__', 'enter_function', 0)
+            self.struct = {'Provider': {
+                'order': 8,
+                'name': 32104,
+                'listTyp': 'list',
+                'type': 'Dictionary',
+                'menuLoader': 'menu_loader',
+                'settings': {
+                    'Type': {
+                        'order': 1,
+                        'name': 32131,
+                        'value': '',
+                        'action': 'set_value',
+                        'type': 'multivalue',
+                        'dbus': 'String',
+                        'values': [],
+                        },
+                    'Name': {
+                        'order': 2,
+                        'name': 32132,
+                        'value': '',
+                        'action': 'set_value',
+                        'type': 'text',
+                        'parent': {
+                            'entry': 'Type',
+                            'value': ['pptp', 'openvpn'],
+                            },
+                        },
+                    'Host': {
+                        'order': 3,
+                        'name': 32133,
+                        'value': '',
+                        'action': 'set_value',
+                        'type': 'text',
+                        'parent': {
+                            'entry': 'Type',
+                            'value': ['pptp', 'openvpn'],
+                            },
+                        },
+                    'Domain': {
+                        'order': 7,
+                        'name': 32134,
+                        'value': 'vpn',
+                        'action': 'set_value',
+                        'type': 'text',
+                        'parent': {
+                            'entry': 'Type',
+                            'value': ['pptp', 'openvpn'],
+                            },
+                        'changed': True,
+                        },
+                    'PPTP.User': {
+                        'order': 4,
+                        'name': 32106,
+                        'value': '',
+                        'action': 'set_value',
+                        'type': 'text',
+                        'parent': {
+                            'entry': 'Type',
+                            'value': ['pptp'],
+                            },
+                        },
+                    'PPTP.Password': {
+                        'order': 5,
+                        'name': 32107,
+                        'value': '',
+                        'action': 'set_value',
+                        'type': 'text',
+                        'parent': {
+                            'entry': 'Type',
+                            'value': ['pptp'],
+                            },
+                        },
+                    'advanced': {
+                        'order': 8,
+                        'name': 'Show Advanced',
+                        'value': '0',
+                        'action': 'set_value',
+                        'type': 'bool',
+                        'parent': {
+                            'entry': 'Type',
+                            'value': ['pptp', 'openvpn'],
+                            },
+                        },
+                    'PPPD.EchoFailure': {
+                        'order': 9,
+                        'name': 32162,
+                        'value': '0',
+                        'action': 'set_value',
+                        'type': 'num',
+                        'parent': {
+                            'entry': 'Type',
+                            'value': ['pptp'],
+                            },
+                        'optional': '',
+                        },
+                    'PPPD.EchoInterval': {
+                        'order': 9,
+                        'name': 32163,
+                        'value': '0',
+                        'action': 'set_value',
+                        'type': 'num',
+                        'parent': {
+                            'entry': 'Type',
+                            'value': ['pptp'],
+                            },
+                        'optional': '',
+                        },
+                    'PPPD.RefuseEAP': {
+                        'order': 9,
+                        'name': 32151,
+                        'value': '0',
+                        'action': 'set_value',
+                        'type': 'bool',
+                        'parent': {
+                            'entry': 'Type',
+                            'value': ['pptp'],
+                            },
+                        'optional': '',
+                        },
+                    'PPPD.RefusePAP': {
+                        'order': 9,
+                        'name': 32152,
+                        'value': '0',
+                        'action': 'set_value',
+                        'type': 'bool',
+                        'parent': {
+                            'entry': 'Type',
+                            'value': ['pptp'],
+                            },
+                        'optional': '',
+                        },
+                    'PPPD.RefuseCHAP': {
+                        'order': 9,
+                        'name': 32153,
+                        'value': '0',
+                        'action': 'set_value',
+                        'type': 'bool',
+                        'parent': {
+                            'entry': 'Type',
+                            'value': ['pptp'],
+                            },
+                        'optional': '',
+                        },
+                    'PPPD.RefuseMSCHAP': {
+                        'order': 9,
+                        'name': 32154,
+                        'value': '0',
+                        'action': 'set_value',
+                        'type': 'bool',
+                        'parent': {
+                            'entry': 'Type',
+                            'value': ['pptp'],
+                            },
+                        'optional': '',
+                        },
+                    'PPPD.RefuseMSCHAP2': {
+                        'order': 9,
+                        'name': 32155,
+                        'value': '0',
+                        'action': 'set_value',
+                        'type': 'bool',
+                        'parent': {
+                            'entry': 'Type',
+                            'value': ['pptp'],
+                            },
+                        'optional': '',
+                        },
+                    'PPPD.NoBSDComp': {
+                        'order': 9,
+                        'name': 32160,
+                        'value': '0',
+                        'action': 'set_value',
+                        'type': 'bool',
+                        'parent': {
+                            'entry': 'Type',
+                            'value': ['pptp'],
+                            },
+                        'optional': '',
+                        },
+                    'PPPD.NoDeflate': {
+                        'order': 9,
+                        'name': 32164,
+                        'value': '0',
+                        'action': 'set_value',
+                        'type': 'bool',
+                        'parent': {
+                            'entry': 'Type',
+                            'value': ['pptp'],
+                            },
+                        'optional': '',
+                        },
+                    'PPPD.RequirMPPE': {
+                        'order': 9,
+                        'name': 32156,
+                        'value': '0',
+                        'action': 'set_value',
+                        'type': 'bool',
+                        'parent': {
+                            'entry': 'Type',
+                            'value': ['pptp'],
+                            },
+                        'optional': '',
+                        },
+                    'PPPD.RequirMPPE40': {
+                        'order': 9,
+                        'name': 32157,
+                        'value': '0',
+                        'action': 'set_value',
+                        'type': 'bool',
+                        'parent': {
+                            'entry': 'Type',
+                            'value': ['pptp'],
+                            },
+                        'optional': '',
+                        },
+                    'PPPD.RequirMPPE128': {
+                        'order': 9,
+                        'name': 32158,
+                        'value': '0',
+                        'action': 'set_value',
+                        'type': 'bool',
+                        'parent': {
+                            'entry': 'Type',
+                            'value': ['pptp'],
+                            },
+                        'optional': '',
+                        },
+                    'PPPD.RequirMPPEStateful': {
+                        'order': 9,
+                        'name': 32159,
+                        'value': '0',
+                        'action': 'set_value',
+                        'type': 'bool',
+                        'parent': {
+                            'entry': 'Type',
+                            'value': ['pptp'],
+                            },
+                        'optional': '',
+                        },
+                    'PPPD.NoVJ': {
+                        'order': 9,
+                        'name': 32161,
+                        'value': '0',
+                        'action': 'set_value',
+                        'type': 'bool',
+                        'parent': {
+                            'entry': 'Type',
+                            'value': ['pptp'],
+                            },
+                        'optional': '',
+                        },
+                    'OpenVPN.CACert': {
+                        'order': 5,
+                        'name': 32137,
+                        'value': '',
+                        'action': 'set_value',
+                        'type': 'file',
+                        'parent': {
+                            'entry': 'Type',
+                            'value': ['openvpn'],
+                            },
+                        },
+                    'OpenVPN.Cert': {
+                        'order': 5,
+                        'name': 32138,
+                        'value': '',
+                        'action': 'set_value',
+                        'type': 'file',
+                        'parent': {
+                            'entry': 'Type',
+                            'value': ['openvpn'],
+                            },
+                        },
+                    'OpenVPN.Key': {
+                        'order': 5,
+                        'name': 32139,
+                        'value': '',
+                        'action': 'set_value',
+                        'type': 'file',
+                        'parent': {
+                            'entry': 'Type',
+                            'value': ['openvpn'],
+                            },
+                        },
+                    'OpenVPN.MTU': {
+                        'order': 9,
+                        'name': 32165,
+                        'value': '',
+                        'action': 'set_value',
+                        'type': 'text',
+                        'parent': {
+                            'entry': 'Type',
+                            'value': ['openvpn'],
+                            },
+                        'optional': '',
+                        },
+                    'OpenVPN.NSCertType': {
+                        'order': 9,
+                        'name': 32166,
+                        'value': '',
+                        'action': 'set_value',
+                        'type': 'text',
+                        'parent': {
+                            'entry': 'Type',
+                            'value': ['openvpn'],
+                            },
+                        'optional': '',
+                        },
+                    'OpenVPN.Proto': {
+                        'order': 9,
+                        'name': 32167,
+                        'value': '',
+                        'action': 'set_value',
+                        'type': 'text',
+                        'parent': {
+                            'entry': 'Type',
+                            'value': ['openvpn'],
+                            },
+                        'optional': '',
+                        },
+                    'OpenVPN.Port': {
+                        'order': 9,
+                        'name': 32168,
+                        'value': '',
+                        'action': 'set_value',
+                        'type': 'text',
+                        'parent': {
+                            'entry': 'Type',
+                            'value': ['openvpn'],
+                            },
+                        'optional': '',
+                        },
+                    'OpenVPN.AuthUserPass': {
+                        'order': 9,
+                        'name': 32169,
+                        'value': '',
+                        'action': 'set_value',
+                        'type': 'text',
+                        'parent': {
+                            'entry': 'Type',
+                            'value': ['openvpn'],
+                            },
+                        'optional': '',
+                        },
+                    'OpenVPN.AskPass': {
+                        'order': 9,
+                        'name': 32170,
+                        'value': '0',
+                        'action': 'set_value',
+                        'type': 'bool',
+                        'parent': {
+                            'entry': 'Type',
+                            'value': ['openvpn'],
+                            },
+                        'optional': '',
+                        },
+                    'OpenVPN.AuthNoCache': {
+                        'order': 9,
+                        'name': 32171,
+                        'value': '0',
+                        'action': 'set_value',
+                        'type': 'bool',
+                        'parent': {
+                            'entry': 'Type',
+                            'value': ['openvpn'],
+                            },
+                        'optional': '',
+                        },
+                    'OpenVPN.TLSRemote': {
+                        'order': 9,
+                        'name': 32172,
+                        'value': '0',
+                        'action': 'set_value',
+                        'type': 'bool',
+                        'parent': {
+                            'entry': 'Type',
+                            'value': ['openvpn'],
+                            },
+                        'optional': '',
+                        },
+                    'OpenVPN.TLSAuth': {
+                        'order': 9,
+                        'name': 32173,
+                        'value': '0',
+                        'action': 'set_value',
+                        'type': 'bool',
+                        'parent': {
+                            'entry': 'Type',
+                            'value': ['openvpn'],
+                            },
+                        'optional': '',
+                        },
+                    'OpenVPN.TLSAuthDir': {
+                        'order': 9,
+                        'name': 32174,
+                        'value': '',
+                        'action': 'set_value',
+                        'type': 'text',
+                        'parent': {
+                            'entry': 'Type',
+                            'value': ['openvpn'],
+                            },
+                        'optional': '',
+                        },
+                    'OpenVPN.Auth': {
+                        'order': 9,
+                        'name': 32175,
+                        'value': '',
+                        'action': 'set_value',
+                        'type': 'text',
+                        'parent': {
+                            'entry': 'Type',
+                            'value': ['openvpn'],
+                            },
+                        'optional': '',
+                        },
+                    'OpenVPN.CompLZO': {
+                        'order': 9,
+                        'name': 32176,
+                        'value': '0',
+                        'action': 'set_value',
+                        'type': 'bool',
+                        'parent': {
+                            'entry': 'Type',
+                            'value': ['openvpn'],
+                            },
+                        'optional': '',
+                        },
+                    'OpenVPN.RemoteCertTls': {
+                        'order': 9,
+                        'name': 32177,
+                        'value': '0',
+                        'action': 'set_value',
+                        'type': 'bool',
+                        'parent': {
+                            'entry': 'Type',
+                            'value': ['openvpn'],
+                            },
+                        'optional': '',
+                        },
+                    'OpenVPN.ConfigFile': {
+                        'order': 9,
+                        'name': 32178,
+                        'value': '',
+                        'action': 'set_value',
+                        'type': 'file',
+                        'parent': {
+                            'entry': 'Type',
+                            'value': ['openvpn'],
+                            },
+                        'optional': '',
+                        },
+                    },
+                }}
+
+            self.oe = oeMain
+            if os.path.exists('%s/%s' % (self.oe.dictModules['connman'].VPN_PLUGINS_DIR, 'openvpn.so')):
+                self.struct['Provider']['settings']['Type']['values'].append('openvpn')
+            if os.path.exists('%s/%s' % (self.oe.dictModules['connman'].VPN_PLUGINS_DIR, 'pptp.so')):
+                self.struct['Provider']['settings']['Type']['values'].append('pptp')
+            self.winOeCon = oeWindows.mainWindow('mainWindow.xml', self.oe.__cwd__, 'Default', oeMain=oeMain, isChild=True)
+            self.show_advanced_entrys = '0'
+            self.oe.dictModules['connmanVpnConfig'] = self
+            self.VPN_CONF_DIR = '%s/vpn-config/' % self.oe.USER_CONFIG
+            self.vpn_name = vpn
+            self.winOeCon.show()
+            dictProperties = {
+                'modul': 'connmanVpnConfig',
+                'listTyp': self.oe.listObject['list'],
+                'menuLoader': 'menu_loader',
+                'category': 'Provider',
+                }
+            self.winOeCon.addMenuItem(self.struct['Provider']['name'], dictProperties)
+            if self.vpn_name != '__new__':
+                self.load_vpn_config(vpn)
+            self.winOeCon.doModal()
+            del self.winOeCon
+            del self.oe.dictModules['connmanVpnConfig']
+            self.oe.dbg_log('connmanVpn::__init__', 'exit_function', 0)
+        except Exception, e:
+            self.oe.dbg_log('connmanVpn::__init__', 'ERROR: (' + repr(e) + ')', 4)
+
+    def cancel(self):
+        try:
+            self.oe.dbg_log('connmanVpn::cancel', 'exit_function', 0)
+            self.oe.set_busy(1)
+            self.winOeCon.close()
+            self.oe.set_busy(0)
+            self.oe.dbg_log('connmanVpn::cancel', 'exit_function', 0)
+        except Exception, e:
+            self.oe.set_busy(0)
+            self.oe.dbg_log('connmanVpn::cancel', 'ERROR: (' + repr(e) + ')', 4)
+
+    def show_advanced(self, listItem=None):
+        try:
+            self.oe.dbg_log('connmanVpn::show_advanced', 'exit_function', 0)
+            self.show_advanced_entrys = listItem.getProperty('value')
+            self.oe.dbg_log('connmanVpn::show_advanced', 'exit_function', 0)
+        except Exception, e:
+            self.oe.dbg_log('connmanVpn::show_advanced', 'ERROR: (' + repr(e) + ')', 4)
+
+    def menu_loader(self, menuItem):
+        try:
+            self.oe.dbg_log('connmanVpn::menu_loader', 'enter_function', 0)
+            self.winOeCon.showButton(3, 32140, 'connmanVpnConfig', 'save_vpn_config')
+            self.winOeCon.showButton(2, 32212, 'connmanVpnConfig', 'cancel')
+            if self.vpn_name not in ['__new__']:
+                self.winOeCon.showButton(1, 32141, 'connmanVpnConfig', 'delete_vpn_config')
+            self.winOeCon.build_menu(self.struct, fltr=[menuItem.getProperty('category')], optional=self.struct['Provider']['settings'
+                                     ]['advanced']['value'])
+            self.oe.dbg_log('connmanVpn::menu_loader', 'exit_function', 0)
+        except Exception, e:
+            self.oe.dbg_log('connmanVpn::menu_loader', 'ERROR: (' + repr(e) + ')', 4)
+
+    def set_value(self, listItem):
+        try:
+            self.oe.dbg_log('connmanVpn::set_value', 'enter_function', 0)
+            self.struct[listItem.getProperty('category')]['settings'][listItem.getProperty('entry')]['value'] = listItem.getProperty('value')
+            self.struct[listItem.getProperty('category')]['settings'][listItem.getProperty('entry')]['changed'] = True
+            self.oe.dbg_log('connmanVpn::set_value', 'exit_function', 0)
+        except Exception, e:
+            self.oe.dbg_log('connmanVpn::set_value', 'ERROR: (' + repr(e) + ')', 4)
+
+    def load_vpn_config(self, vpn_name):
+        try:
+            self.oe.dbg_log('connmanVpn::load_vpn_config', 'enter_function', 0)
+            self.vpn_conf = ConfigParser.RawConfigParser()
+            self.vpn_conf.optionxform = str
+            vpn_file_name = '%s%s.config' % (self.VPN_CONF_DIR, vpn_name)
+            if os.path.exists(vpn_file_name):
+                self.vpn_conf.readfp(open(vpn_file_name))
+            for section in self.vpn_conf.sections():
+                if 'provider_' in section:
+                    if self.vpn_conf.has_option(section, 'Name'):
+                        if self.vpn_conf.get(section, 'Name') == vpn_name:
+                            for option in self.vpn_conf.options(section):
+                                if option in self.struct['Provider']['settings']:
+                                    self.struct['Provider']['settings'][option]['value'] = self.vpn_conf.get(section, option)
+                                    self.struct['Provider']['settings'][option]['changed'] = True
+            self.oe.dbg_log('connmanVpn::load_vpn_config', 'exit_function', 0)
+        except Exception, e:
+            self.oe.dbg_log('connmanVpn::load_vpn_config', 'ERROR: (' + repr(e) + ')', 4)
+
+    def save_vpn_config(self):
+        try:
+            self.oe.dbg_log('connmanVpn::save_vpn_config', 'enter_function', 0)
+            self.oe.set_busy(1)
+            for entry in sorted(self.struct['Provider']['settings'], key=lambda x: self.struct['Provider']['settings'][x]['order']):
+                if 'parent' in self.struct['Provider']['settings'][entry]:
+                    if self.struct['Provider']['settings']['Type']['value'] in self.struct['Provider']['settings'][entry]['parent']['value'] \
+                        and not 'optional' in self.struct['Provider']['settings'][entry] and self.struct['Provider']['settings'][entry]['value'] \
+                        == '':
+                        dialog = xbmcgui.Dialog()
+                        self.oe.set_busy(0)
+                        dialog.ok('OpenELEC VPN', self.oe._(32378).encode('utf-8'))
+                        self.oe.dbg_log('connmanVpn::save_vpn_config', 'exit_function (incomplete)', 0)
+                        return
+            self.vpn_conf = ConfigParser.ConfigParser()
+            self.vpn_conf.optionxform = str
+            self.vpn_conf.add_section('global')
+            self.vpn_conf.set('global', 'Name', self.struct['Provider']['settings']['Name']['value'])
+            section = 'provider_%s' % self.struct['Provider']['settings']['Type']['value']
+            self.vpn_conf.add_section(section)
+            for entry in sorted(self.struct['Provider']['settings'], key=lambda x: self.struct['Provider']['settings'][x]['order']):
+                if 'changed' in self.struct['Provider']['settings'][entry]:
+                    self.vpn_conf.set(section, entry, self.struct['Provider']['settings'][entry]['value'])
+            if os.path.exists('%s%s.config' % (self.VPN_CONF_DIR, self.vpn_name)):
+                os.remove('%s%s.config' % (self.VPN_CONF_DIR, self.vpn_name))
+            vpn_file_name = '%s%s.config' % (self.VPN_CONF_DIR, self.struct['Provider']['settings']['Name']['value'])
+            with open(vpn_file_name, 'wb') as configfile:
+                self.vpn_conf.write(configfile)
+            self.oe.dbg_log('connmanVpn::save_vpn_config', 'exit_function', 0)
+            self.oe.set_busy(0)
+            return 'close'
+        except Exception, e:
+            self.oe.set_busy(0)
+            self.oe.dbg_log('connmanVpn::save_vpn_config', 'ERROR: (' + repr(e) + ')', 4)
+
+    def delete_vpn_config(self):
+        try:
+            self.oe.dbg_log('connmanVpn::delete_vpn_config', 'enter_function', 0)
+            self.oe.dictModules['connman'].delete_network(None)
+            self.oe.dbg_log('connmanVpn::delete_vpn_config', 'exit_function', 0)
+            return 'close'
+        except Exception, e:
+            self.oe.dbg_log('connmanService::delete_network', 'ERROR: (' + repr(e) + ')', 4)
+            return 'close'
+
+
+####################################################################
 ## Connman main class
 ####################################################################
 
 class connman:
 
     ENABLED = False
+    VPN_CONF_DIR = None
     CONNMAN_DAEMON = None
     WAIT_CONF_FILE = None
+    VPN_PLUGINS_DIR = None
     menu = {
         '2': {
             'name': 32100,
@@ -584,6 +1203,20 @@
                         }},
                     'order': 1,
                     },
+                'vpn': {
+                    'order': 3,
+                    'name': 32321,
+                    'dbus': 'Dictionary',
+                    'settings': {'add': {
+                        'order': 1,
+                        'value': '',
+                        'name': 32322,
+                        'action': 'add_vpn',
+                        'type': 'button',
+                        'InfoText': 731,
+                        }},
+                    'order': 2,
+                    },
                 'Timeservers': {
                     'order': 4,
                     'name': 32123,
@@ -688,6 +1321,11 @@
         try:
             self.oe.dbg_log('connman::load_values', 'enter_function', 0)
 
+            # VPN Available
+
+            if not os.path.exists(self.VPN_PLUGINS_DIR):
+                self.struct['vpn']['hidden'] = 'true'
+
             # Network Wait
 
             self.struct['advanced']['settings']['wait_for_network']['value'] = '0'
@@ -872,12 +1510,12 @@
                     'text': self.oe._(32144),
                     'action': 'connect_network',
                     }
-            if listItem.getProperty('Favorite') == '1':
+            if listItem.getProperty('Favorite') == '1' or listItem.getProperty('netType') == 'vpn':
                 values[2] = {
                     'text': self.oe._(32150),
                     'action': 'configure_network',
                     }
-            if listItem.getProperty('Favorite') == '1' and listItem.getProperty('netType') == 'wifi':
+            if listItem.getProperty('Favorite') == '1' and listItem.getProperty('netType') == 'wifi' or listItem.getProperty('netType') == 'vpn':
                 values[3] = {
                     'text': self.oe._(32141),
                     'action': 'delete_network',
@@ -991,8 +1629,12 @@
             self.oe.dbg_log('connman::configure_network', 'enter_function', 0)
             if listItem == None:
                 listItem = self.oe.winOeMain.getControl(self.oe.listObject['netlist']).getSelectedItem()
-            self.configureService = connmanService(listItem.getProperty('entry'), self.oe)
-            del self.configureService
+            if not listItem.getProperty('netType') == 'vpn':
+                self.configureService = connmanService(listItem.getProperty('entry'), self.oe)
+                del self.configureService
+            else:
+                self.configure_vpn = connmanVpn(listItem.getLabel(), self.oe)
+                del self.configure_vpn
             self.menu_connections(None)
             self.oe.dbg_log('connman::configure_network', 'exit_function', 0)
         except Exception, e:
@@ -1064,10 +1706,16 @@
                 listItem = self.oe.winOeMain.getControl(self.oe.listObject['netlist']).getSelectedItem()
             service_path = listItem.getProperty('entry')
             network_type = listItem.getProperty('netType')
-            service_object = self.oe.dbusSystemBus.get_object('net.connman', service_path)
-            dbus.Interface(service_object, 'net.connman.Service').Remove()
-            service_object = None
-            del service_object
+            if network_type == 'vpn':
+                if listItem.getProperty('State') in ['ready', 'online']:
+                    self.disconnect_network(listItem)
+                if os.path.exists('%s%s.config' % (self.VPN_CONF_DIR, listItem.getLabel())):
+                    os.remove('%s%s.config' % (self.VPN_CONF_DIR, listItem.getLabel()))
+            else:
+                service_object = self.oe.dbusSystemBus.get_object('net.connman', service_path)
+                dbus.Interface(service_object, 'net.connman.Service').Remove()
+                service_object = None
+                del service_object
             self.oe.set_busy(0)
             self.oe.dbg_log('connman::delete_network', 'exit_function', 0)
         except Exception, e:
@@ -1089,6 +1737,16 @@
             self.oe.set_busy(0)
             self.oe.dbg_log('connman::refresh_network', 'ERROR: (' + repr(e) + ')', 4)
 
+    def add_vpn(self, listItem=None):
+        try:
+            self.oe.dbg_log('connman::add_vpn', 'enter_function', 0)
+            self.configure_vpn = connmanVpn('__new__', self.oe)
+            self.configure_vpn = None
+            del self.configure_vpn
+            self.oe.dbg_log('connman::add_vpn', 'exit_function', 0)
+        except Exception, e:
+            self.oe.dbg_log('connman::add_vpn', 'ERROR: (' + repr(e) + ')', 4)
+
     def get_service_path(self):
         try:
             self.oe.dbg_log('connman::get_service_path', 'enter_function', 0)
@@ -1166,8 +1824,10 @@
                 self.oe = oeMain
                 self.signal_receivers = []
                 self.NameOwnerWatch = None
+                self.vpnNameOwnerWatch = None
                 self.parent = parent
                 self.wifiAgentPath = '/OpenELEC/agent_wifi'
+                self.vpnAgentPath = '/OpenELEC/agent_vpn'
                 self.oe.dbg_log('connman::monitor::__init__', 'exit_function', 0)
             except Exception, e:
                 self.oe.dbg_log('connman::monitor::__init__', 'ERROR: (' + repr(e) + ')')
@@ -1185,6 +1845,7 @@
                                              dbus_interface='net.connman.Technology', signal_name='PropertyChanged', path_keyword='path'))
                 self.signal_receivers.append(self.oe.dbusSystemBus.add_signal_receiver(self.managerPropertyChanged, bus_name='net.connman',
                                              signal_name='PropertyChanged', path_keyword='path', interface_keyword='interface'))
+                self.vpnNameOwnerWatch = self.oe.dbusSystemBus.watch_name_owner('net.connman.vpn', self.vpnNameOwnerChanged)
                 self.conNameOwnerWatch = self.oe.dbusSystemBus.watch_name_owner('net.connman', self.conNameOwnerChanged)
                 self.oe.dbg_log('connman::monitor::add_signal_receivers', 'exit_function', 0)
             except Exception, e:
@@ -1197,9 +1858,13 @@
                     signal_receiver.remove()
                     signal_receiver = None
                 self.conNameOwnerWatch.cancel()
+                self.vpnNameOwnerWatch.cancel()
                 self.conNameOwnerWatch = None
+                self.vpnNameOwnerWatch = None
                 if hasattr(self, 'wifiAgent'):
                     self.remove_agent()
+                if hasattr(self, 'vpnAgent'):
+                    self.remove_vpn_agent()
                 self.oe.dbg_log('connman::monitor::remove_signal_receivers', 'exit_function', 0)
             except Exception, e:
                 self.oe.dbg_log('connman::monitor::remove_signal_receivers', 'ERROR: (' + repr(e) + ')', 4)
@@ -1215,6 +1880,17 @@
             except Exception, e:
                 self.oe.dbg_log('connman::monitor::nameOwnerChanged', 'ERROR: (' + repr(e) + ')', 4)
 
+        def vpnNameOwnerChanged(self, proxy):
+            try:
+                self.oe.dbg_log('connman::monitor::vpnNameOwnerChanged', 'enter_function', 0)
+                if proxy:
+                    self.initialize_vpn_agent()
+                else:
+                    self.remove_vpn_agent()
+                self.oe.dbg_log('connman::monitor::vpnNameOwnerChanged', 'exit_function', 0)
+            except Exception, e:
+                self.oe.dbg_log('connman::monitor::vpnNameOwnerChanged', 'ERROR: (' + repr(e) + ')', 4)
+
         def initialize_agent(self):
             try:
                 self.oe.dbg_log('connman::monitor::initialize_agent', 'enter_function', 0)
@@ -1243,6 +1919,36 @@
             except Exception, e:
                 self.oe.dbg_log('connman::monitor::remove_agent', 'ERROR: (' + repr(e) + ')', 4)
 
+        def initialize_vpn_agent(self):
+            try:
+                self.oe.dbg_log('connman::monitor::initialize_vpn_agent', 'enter_function', 0)
+                dbusConnmanVpnManager = dbus.Interface(self.oe.dbusSystemBus.get_object('net.connman.vpn', '/'), 'net.connman.vpn.Manager')
+                self.vpnAgent = connmanVpnAgent(self.oe.dbusSystemBus, self.vpnAgentPath)
+                self.vpnAgent.oe = self.oe
+                dbusConnmanVpnManager.RegisterAgent(self.vpnAgentPath)
+                dbusConnmanVpnManager = None
+                self.oe.dbg_log('connman::monitor::initialize_vpn_agent', 'exit_function', 0)
+            except Exception, e:
+                self.oe.dbg_log('connman::monitor::initialize_vpn_agent', 'ERROR: (' + repr(e) + ')', 4)
+
+        def remove_vpn_agent(self):
+            try:
+                self.oe.dbg_log('connman::monitor::remove_vpn_agent', 'enter_function', 0)
+                if hasattr(self, 'vpnAgent'):
+                    self.vpnAgent.remove_from_connection(self.oe.dbusSystemBus, self.vpnAgentPath)
+                    try:
+                        dbusConnmanVpnManager = dbus.Interface(self.oe.dbusSystemBus.get_object('net.connman.vpn', '/'),
+                                                               'net.connman.vpn.Manager')
+                        dbusConnmanVpnManager.UnregisterAgent(self.vpnAgentPath)
+                        dbusConnmanVpnManager = None
+                    except:
+                        dbusConnmanVpnManager = None
+                    self.vpnAgent = None
+                    del self.vpnAgent
+                self.oe.dbg_log('connman::monitor::remove_vpn_agent', 'exit_function', 0)
+            except Exception, e:
+                self.oe.dbg_log('connman::monitor::remove_vpn_agent', 'ERROR: (' + repr(e) + ')', 4)
+
         def managerPropertyChanged(self, name, value, path, interface):
             try:
                 self.oe.dbg_log('connman::monitor::managerPropertyChanged', 'enter_function', 0)
@@ -1462,3 +2168,57 @@
         return
 
 
+class connmanVpnAgent(dbus.service.Object):
+
+    def busy(self):
+        self.oe.input_request = False
+        if self.oe.__busy__ > 0:
+            xbmc.executebuiltin('ActivateWindow(busydialog)')
+
+    @dbus.service.method('net.connman.vpn.Agent', in_signature='', out_signature='')
+    def Release(self):
+        self.oe.dbg_log('connman::connmanVpnAgent::Release', 'enter_function', 0)
+        self.oe.dbg_log('connman::connmanVpnAgent::Release', 'exit_function (CANCELED)', 0)
+
+    @dbus.service.method('net.connman.vpn.Agent', in_signature='oa{sv}', out_signature='a{sv}')
+    def RequestInput(self, path, fields):
+        try:
+            self.oe.dbg_log('connman::connmanVpnAgent::RequestInput', 'enter_function', 0)
+            self.oe.input_request = True
+            xbmc.executebuiltin('Dialog.Close(busydialog)')
+            response = {}
+            for field in fields:
+                if not 'Value' in fields[field]:
+                    xbmcKeyboard = xbmc.Keyboard('', field)
+                    xbmcKeyboard.doModal()
+                    if xbmcKeyboard.isConfirmed():
+                        if xbmcKeyboard.getText() != '':
+                            response[field] = xbmcKeyboard.getText()
+                        else:
+                            raise Canceled('canceled')
+                            self.busy()
+                            return {}
+                    else:
+                        self.busy()
+                        raise Canceled('canceled')
+                        return {}
+                else:
+                    response[field] = fields[field]['Value']
+            self.oe.dbg_log('connman::connmanVpnAgent::RequestInput', 'exit_function', 0)
+            self.busy()
+            return response
+        except Exception, e:
+            self.oe.dbg_log('connman::connmanVpnAgent::RequestInput', 'ERROR: (' + repr(e) + ')', 4)
+
+    @dbus.service.method('net.connman.vpn.Agent', in_signature='os', out_signature='')
+    def ReportError(self, path, error):
+        self.oe.dbg_log('connman::connmanVpnAgent::ReportError', 'enter_function', 0)
+        self.oe.dbg_log('connman::connmanVpnAgent::ReportError', 'exit_function', 0)
+        return
+
+    @dbus.service.method('net.connman.vpn.Agent', in_signature='', out_signature='')
+    def Cancel(self):
+        self.oe.dbg_log('connman::connmanVpnAgent::Cancel', 'enter_function', 0)
+        self.oe.dbg_log('connman::connmanVpnAgent::Cancel', 'exit_function', 0)
+
+
